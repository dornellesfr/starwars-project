{"ast":null,"code":"var _jsxFileName = \"/home/fernando/Documentos/projects-turma23/sd-023-b-project-starwars-planets-search/src/context/Provider.jsx\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport MyContext from './MyContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Provider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [planets, setPlanets] = useState([]);\n\n  async function fetchPlanets(url) {\n    try {\n      const request = await fetch(url);\n      const response = await request.json();\n      setPlanets(response.map(planet => delete planet.results.residents));\n    } catch (error) {\n      return error;\n    }\n  }\n\n  useEffect(() => {\n    fetchPlanets('https://swapi.dev/api/planets');\n  }, []);\n  const contextValue = {\n    planets\n  };\n  console.log(contextValue);\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Provider, \"von7Z1r3F3hAxnvSjQX44zZhN8s=\");\n\n_c = Provider;\nProvider.propTypes = {\n  children: PropTypes.func.isRequired\n};\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["PropTypes","React","useEffect","useState","MyContext","Provider","children","planets","setPlanets","fetchPlanets","url","request","fetch","response","json","map","planet","results","residents","error","contextValue","console","log","propTypes","func","isRequired"],"sources":["/home/fernando/Documentos/projects-turma23/sd-023-b-project-starwars-planets-search/src/context/Provider.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport MyContext from './MyContext';\n\nfunction Provider({ children }) {\n  const [planets, setPlanets] = useState([]);\n\n  async function fetchPlanets(url) {\n    try {\n      const request = await fetch(url);\n      const response = await request.json();\n\n      setPlanets(response.map((planet) => delete planet.results.residents));\n    } catch (error) {\n      return error;\n    }\n  }\n\n  useEffect(() => {\n    fetchPlanets('https://swapi.dev/api/planets');\n  }, []);\n\n  const contextValue = {\n    planets,\n  };\n\n  console.log(contextValue);\n  return (\n    <MyContext.Provider value={ contextValue }>\n      { children }\n    </MyContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.func.isRequired,\n};\n\nexport default Provider;\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,SAASC,QAAT,OAAgC;EAAA;;EAAA,IAAd;IAAEC;EAAF,CAAc;EAC9B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;;EAEA,eAAeM,YAAf,CAA4BC,GAA5B,EAAiC;IAC/B,IAAI;MACF,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA3B;MACA,MAAMG,QAAQ,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAvB;MAEAN,UAAU,CAACK,QAAQ,CAACE,GAAT,CAAcC,MAAD,IAAY,OAAOA,MAAM,CAACC,OAAP,CAAeC,SAA/C,CAAD,CAAV;IACD,CALD,CAKE,OAAOC,KAAP,EAAc;MACd,OAAOA,KAAP;IACD;EACF;;EAEDjB,SAAS,CAAC,MAAM;IACdO,YAAY,CAAC,+BAAD,CAAZ;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,MAAMW,YAAY,GAAG;IACnBb;EADmB,CAArB;EAIAc,OAAO,CAACC,GAAR,CAAYF,YAAZ;EACA,oBACE,QAAC,SAAD,CAAW,QAAX;IAAoB,KAAK,EAAGA,YAA5B;IAAA,UACId;EADJ;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GA5BQD,Q;;KAAAA,Q;AA8BTA,QAAQ,CAACkB,SAAT,GAAqB;EACnBjB,QAAQ,EAAEN,SAAS,CAACwB,IAAV,CAAeC;AADN,CAArB;AAIA,eAAepB,QAAf"},"metadata":{},"sourceType":"module"}